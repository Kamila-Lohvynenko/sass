@use "decimal" as *;
@use "functions" as *;

@mixin fonts($fs, $fw: null, $lh: null, $ls: null, $align: null) {
  font-size: $fs;

  @if $fw {
    font-weight: $fw;
  }

  @if $lh {
    @if $lh == normal {
      line-height: normal;
    } @else {
      $lh: calc(strip-unit($lh) / strip-unit($fs));
      line-height: decimal-round($lh, 2);
    }
  }

  @if $ls {
    @if $ls == normal {
      letter-spacing: normal;
    } @else {
      $ls: calc(strip-unit($ls) / strip-unit($fs));
      letter-spacing: #{decimal-round($ls, 2)}em;
    }
  }

  @if $align {
    text-align: $align;
  }
}

// mixin for responsive font size
@mixin fluid-fs($min-w, $max-w, $min-fs, $max-fs) {
  $u1: unit($min-w);
  $u2: unit($max-w);
  $u3: unit($min-fs);
  $u4: unit($max-fs);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-fs;

      @media only screen and (min-width: $min-w) {
        font-size: calc(
          #{$min-fs} + #{strip-unit($max-fs - $min-fs)} *
            ((100vw - #{$min-w}) / #{strip-unit($max-w - $min-w)})
        );
      }

      @media only screen and (min-width: $max-w) {
        font-size: $max-fs;
      }
    }
  } @else {
    @error "Incompatible units. Check mixin params";
  }
}
